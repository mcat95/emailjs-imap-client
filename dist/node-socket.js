"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ramda = require("ramda");
var _net = _interopRequireDefault(require("net"));
var _tls = _interopRequireDefault(require("tls"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TCPSocket {
  static open(host, port, options = {}) {
    return new TCPSocket({
      host,
      port,
      options
    });
  }
  constructor({
    host,
    port,
    options
  }) {
    this.host = host;
    this.port = port;
    this.ssl = (0, _ramda.propOr)(false, 'useSecureTransport')(options);
    this.bufferedAmount = 0;
    this.readyState = 'connecting';
    this.binaryType = (0, _ramda.propOr)('arraybuffer', 'binaryType')(options);
    if (this.binaryType !== 'arraybuffer') {
      throw new Error('Only arraybuffers are supported!');
    }
    this._socket = this.ssl ? _tls.default.connect({
      port: this.port,
      host: this.host,
      minVersion: options.minTLSVersion || _tls.default.DEFAULT_MIN_VERSION,
      maxVersion: options.maxTLSVersion || _tls.default.DEFAULT_MAX_VERSION,
      servername: this.host // SNI
    }, () => this._emit('open')) : _net.default.connect(this.port, this.host, () => this._emit('open'));

    // add all event listeners to the new socket
    this._attachListeners();
  }
  _attachListeners() {
    this._socket.on('data', nodeBuf => this._emit('data', nodeBuffertoArrayBuffer(nodeBuf)));
    this._socket.on('error', error => {
      // Ignore ECONNRESET errors. For the app this is the same as normal close
      if (error.code !== 'ECONNRESET') {
        this._emit('error', error);
      }
      this.close();
    });
    this._socket.on('end', () => this._emit('close'));
  }
  _removeListeners() {
    this._socket.removeAllListeners('data');
    this._socket.removeAllListeners('end');
    this._socket.removeAllListeners('error');
  }
  _emit(type, data) {
    const target = this;
    switch (type) {
      case 'open':
        this.readyState = 'open';
        this.onopen && this.onopen({
          target,
          type,
          data
        });
        break;
      case 'error':
        this.onerror && this.onerror({
          target,
          type,
          data
        });
        break;
      case 'data':
        this.ondata && this.ondata({
          target,
          type,
          data
        });
        break;
      case 'drain':
        this.ondrain && this.ondrain({
          target,
          type,
          data
        });
        break;
      case 'close':
        this.readyState = 'closed';
        this.onclose && this.onclose({
          target,
          type,
          data
        });
        break;
    }
  }

  //
  // API
  //

  close() {
    this.readyState = 'closing';
    this._socket.end();
  }
  send(data) {
    // convert data to string or node buffer
    this._socket.write(arrayBufferToNodeBuffer(data), this._emit.bind(this, 'drain'));
  }
  upgradeToSecure() {
    if (this.ssl) return;
    this._removeListeners();
    this._socket = _tls.default.connect({
      socket: this._socket
    }, () => {
      this.ssl = true;
    });
    this._attachListeners();
  }
}
exports.default = TCPSocket;
const nodeBuffertoArrayBuffer = buf => Uint8Array.from(buf).buffer;
const arrayBufferToNodeBuffer = ab => Buffer.from(new Uint8Array(ab));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUQ1BTb2NrZXQiLCJvcGVuIiwiaG9zdCIsInBvcnQiLCJvcHRpb25zIiwiY29uc3RydWN0b3IiLCJzc2wiLCJwcm9wT3IiLCJidWZmZXJlZEFtb3VudCIsInJlYWR5U3RhdGUiLCJiaW5hcnlUeXBlIiwiRXJyb3IiLCJfc29ja2V0IiwidGxzIiwiY29ubmVjdCIsIm1pblZlcnNpb24iLCJtaW5UTFNWZXJzaW9uIiwiREVGQVVMVF9NSU5fVkVSU0lPTiIsIm1heFZlcnNpb24iLCJtYXhUTFNWZXJzaW9uIiwiREVGQVVMVF9NQVhfVkVSU0lPTiIsInNlcnZlcm5hbWUiLCJfZW1pdCIsIm5ldCIsIl9hdHRhY2hMaXN0ZW5lcnMiLCJvbiIsIm5vZGVCdWYiLCJub2RlQnVmZmVydG9BcnJheUJ1ZmZlciIsImVycm9yIiwiY29kZSIsImNsb3NlIiwiX3JlbW92ZUxpc3RlbmVycyIsInJlbW92ZUFsbExpc3RlbmVycyIsInR5cGUiLCJkYXRhIiwidGFyZ2V0Iiwib25vcGVuIiwib25lcnJvciIsIm9uZGF0YSIsIm9uZHJhaW4iLCJvbmNsb3NlIiwiZW5kIiwic2VuZCIsIndyaXRlIiwiYXJyYXlCdWZmZXJUb05vZGVCdWZmZXIiLCJiaW5kIiwidXBncmFkZVRvU2VjdXJlIiwic29ja2V0IiwiYnVmIiwiVWludDhBcnJheSIsImZyb20iLCJidWZmZXIiLCJhYiIsIkJ1ZmZlciJdLCJzb3VyY2VzIjpbIi4uL3NyYy9ub2RlLXNvY2tldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9wT3IgfSBmcm9tICdyYW1kYSdcbmltcG9ydCBuZXQgZnJvbSAnbmV0J1xuaW1wb3J0IHRscyBmcm9tICd0bHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRDUFNvY2tldCB7XG4gIHN0YXRpYyBvcGVuIChob3N0LCBwb3J0LCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFRDUFNvY2tldCh7IGhvc3QsIHBvcnQsIG9wdGlvbnMgfSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yICh7IGhvc3QsIHBvcnQsIG9wdGlvbnMgfSkge1xuICAgIHRoaXMuaG9zdCA9IGhvc3RcbiAgICB0aGlzLnBvcnQgPSBwb3J0XG4gICAgdGhpcy5zc2wgPSBwcm9wT3IoZmFsc2UsICd1c2VTZWN1cmVUcmFuc3BvcnQnKShvcHRpb25zKVxuICAgIHRoaXMuYnVmZmVyZWRBbW91bnQgPSAwXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nvbm5lY3RpbmcnXG4gICAgdGhpcy5iaW5hcnlUeXBlID0gcHJvcE9yKCdhcnJheWJ1ZmZlcicsICdiaW5hcnlUeXBlJykob3B0aW9ucylcblxuICAgIGlmICh0aGlzLmJpbmFyeVR5cGUgIT09ICdhcnJheWJ1ZmZlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBhcnJheWJ1ZmZlcnMgYXJlIHN1cHBvcnRlZCEnKVxuICAgIH1cblxuICAgIHRoaXMuX3NvY2tldCA9IHRoaXMuc3NsXG4gICAgICA/IHRscy5jb25uZWN0KHtcbiAgICAgICAgcG9ydDogdGhpcy5wb3J0LFxuICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgIG1pblZlcnNpb246IG9wdGlvbnMubWluVExTVmVyc2lvbiB8fCB0bHMuREVGQVVMVF9NSU5fVkVSU0lPTixcbiAgICAgICAgbWF4VmVyc2lvbjogb3B0aW9ucy5tYXhUTFNWZXJzaW9uIHx8IHRscy5ERUZBVUxUX01BWF9WRVJTSU9OLFxuICAgICAgICBzZXJ2ZXJuYW1lOiB0aGlzLmhvc3QgLy8gU05JXG4gICAgICB9LCAoKSA9PiB0aGlzLl9lbWl0KCdvcGVuJykpXG4gICAgICA6IG5ldC5jb25uZWN0KHRoaXMucG9ydCwgdGhpcy5ob3N0LCAoKSA9PiB0aGlzLl9lbWl0KCdvcGVuJykpXG5cbiAgICAvLyBhZGQgYWxsIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgbmV3IHNvY2tldFxuICAgIHRoaXMuX2F0dGFjaExpc3RlbmVycygpXG4gIH1cblxuICBfYXR0YWNoTGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLl9zb2NrZXQub24oJ2RhdGEnLCBub2RlQnVmID0+IHRoaXMuX2VtaXQoJ2RhdGEnLCBub2RlQnVmZmVydG9BcnJheUJ1ZmZlcihub2RlQnVmKSkpXG4gICAgdGhpcy5fc29ja2V0Lm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIC8vIElnbm9yZSBFQ09OTlJFU0VUIGVycm9ycy4gRm9yIHRoZSBhcHAgdGhpcyBpcyB0aGUgc2FtZSBhcyBub3JtYWwgY2xvc2VcbiAgICAgIGlmIChlcnJvci5jb2RlICE9PSAnRUNPTk5SRVNFVCcpIHtcbiAgICAgICAgdGhpcy5fZW1pdCgnZXJyb3InLCBlcnJvcilcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH0pXG5cbiAgICB0aGlzLl9zb2NrZXQub24oJ2VuZCcsICgpID0+IHRoaXMuX2VtaXQoJ2Nsb3NlJykpXG4gIH1cblxuICBfcmVtb3ZlTGlzdGVuZXJzICgpIHtcbiAgICB0aGlzLl9zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdkYXRhJylcbiAgICB0aGlzLl9zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdlbmQnKVxuICAgIHRoaXMuX3NvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Vycm9yJylcbiAgfVxuXG4gIF9lbWl0ICh0eXBlLCBkYXRhKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJ1xuICAgICAgICB0aGlzLm9ub3BlbiAmJiB0aGlzLm9ub3Blbih7IHRhcmdldCwgdHlwZSwgZGF0YSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB0aGlzLm9uZXJyb3IgJiYgdGhpcy5vbmVycm9yKHsgdGFyZ2V0LCB0eXBlLCBkYXRhIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgdGhpcy5vbmRhdGEgJiYgdGhpcy5vbmRhdGEoeyB0YXJnZXQsIHR5cGUsIGRhdGEgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2RyYWluJzpcbiAgICAgICAgdGhpcy5vbmRyYWluICYmIHRoaXMub25kcmFpbih7IHRhcmdldCwgdHlwZSwgZGF0YSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJ1xuICAgICAgICB0aGlzLm9uY2xvc2UgJiYgdGhpcy5vbmNsb3NlKHsgdGFyZ2V0LCB0eXBlLCBkYXRhIH0pXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gQVBJXG4gIC8vXG5cbiAgY2xvc2UgKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zaW5nJ1xuICAgIHRoaXMuX3NvY2tldC5lbmQoKVxuICB9XG5cbiAgc2VuZCAoZGF0YSkge1xuICAgIC8vIGNvbnZlcnQgZGF0YSB0byBzdHJpbmcgb3Igbm9kZSBidWZmZXJcbiAgICB0aGlzLl9zb2NrZXQud3JpdGUoYXJyYXlCdWZmZXJUb05vZGVCdWZmZXIoZGF0YSksIHRoaXMuX2VtaXQuYmluZCh0aGlzLCAnZHJhaW4nKSlcbiAgfVxuXG4gIHVwZ3JhZGVUb1NlY3VyZSAoKSB7XG4gICAgaWYgKHRoaXMuc3NsKSByZXR1cm5cblxuICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVycygpXG4gICAgdGhpcy5fc29ja2V0ID0gdGxzLmNvbm5lY3QoeyBzb2NrZXQ6IHRoaXMuX3NvY2tldCB9LCAoKSA9PiB7IHRoaXMuc3NsID0gdHJ1ZSB9KVxuICAgIHRoaXMuX2F0dGFjaExpc3RlbmVycygpXG4gIH1cbn1cblxuY29uc3Qgbm9kZUJ1ZmZlcnRvQXJyYXlCdWZmZXIgPSBidWYgPT4gVWludDhBcnJheS5mcm9tKGJ1ZikuYnVmZmVyXG5jb25zdCBhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlciA9IChhYikgPT4gQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkoYWIpKVxu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