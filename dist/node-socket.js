"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ramda = require("ramda");
var _net = _interopRequireDefault(require("net"));
var _tls = _interopRequireDefault(require("tls"));
var _httpProxyClient = _interopRequireDefault(require("./http-proxy-client.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class TCPSocket {
  static open(host, port, options = {}) {
    return new TCPSocket({
      host,
      port,
      options
    });
  }
  constructor({
    host,
    port,
    options
  }) {
    this.host = host;
    this.port = port;
    this.ssl = (0, _ramda.propOr)(false, 'useSecureTransport')(options);
    this.bufferedAmount = 0;
    this.readyState = 'connecting';
    this.binaryType = (0, _ramda.propOr)('arraybuffer', 'binaryType')(options);
    if (this.binaryType !== 'arraybuffer') {
      throw new Error('Only arraybuffers are supported!');
    }
    if (options.proxy) {
      this._socket = (0, _httpProxyClient.default)(options.proxy, this.port, this.host, err => {
        if (err) return this._emit('error', err);
        // Upgrade to SSL connection if using secure connection
        if (this.ssl) {
          this._socket = _tls.default.connect({
            socket: this._socket,
            host: this.host,
            servername: this.host // SNI
          }, () => {
            this.ssl = true;
          });
        }
        this._attachListeners();
        this._emit('open');
      });
    } else {
      this._socket = this.ssl ? _tls.default.connect({
        port: this.port,
        host: this.host,
        minVersion: options.minTLSVersion || _tls.default.DEFAULT_MIN_VERSION,
        maxVersion: options.maxTLSVersion || _tls.default.DEFAULT_MAX_VERSION,
        servername: this.host // SNI
      }, () => this._emit('open')) : _net.default.connect(this.port, this.host, () => this._emit('open'));
      // add all event listeners to the new socket
      this._attachListeners();
    }
  }
  _attachListeners() {
    this._socket.on('data', nodeBuf => this._emit('data', nodeBuffertoArrayBuffer(nodeBuf)));
    this._socket.on('error', error => {
      // Ignore ECONNRESET errors. For the app this is the same as normal close
      if (error.code !== 'ECONNRESET') {
        this._emit('error', error);
      }
      this.close();
    });
    this._socket.on('end', () => this._emit('close'));
  }
  _removeListeners() {
    this._socket.removeAllListeners('data');
    this._socket.removeAllListeners('end');
    this._socket.removeAllListeners('error');
  }
  _emit(type, data) {
    const target = this;
    switch (type) {
      case 'open':
        this.readyState = 'open';
        this.onopen && this.onopen({
          target,
          type,
          data
        });
        break;
      case 'error':
        this.onerror && this.onerror({
          target,
          type,
          data
        });
        break;
      case 'data':
        this.ondata && this.ondata({
          target,
          type,
          data
        });
        break;
      case 'drain':
        this.ondrain && this.ondrain({
          target,
          type,
          data
        });
        break;
      case 'close':
        this.readyState = 'closed';
        this.onclose && this.onclose({
          target,
          type,
          data
        });
        break;
    }
  }

  //
  // API
  //

  close() {
    this.readyState = 'closing';
    this._socket.end();
  }
  send(data) {
    // convert data to string or node buffer
    this._socket.write(arrayBufferToNodeBuffer(data), this._emit.bind(this, 'drain'));
  }
  upgradeToSecure() {
    if (this.ssl) return;
    this._removeListeners();
    this._socket = _tls.default.connect({
      host: this.host,
      servername: this.host,
      // SNI
      socket: this._socket
    }, () => {
      this.ssl = true;
    });
    this._attachListeners();
  }
}
exports.default = TCPSocket;
const nodeBuffertoArrayBuffer = buf => Uint8Array.from(buf).buffer;
const arrayBufferToNodeBuffer = ab => Buffer.from(new Uint8Array(ab));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUQ1BTb2NrZXQiLCJvcGVuIiwiaG9zdCIsInBvcnQiLCJvcHRpb25zIiwiY29uc3RydWN0b3IiLCJzc2wiLCJwcm9wT3IiLCJidWZmZXJlZEFtb3VudCIsInJlYWR5U3RhdGUiLCJiaW5hcnlUeXBlIiwiRXJyb3IiLCJwcm94eSIsIl9zb2NrZXQiLCJodHRwUHJveHlDbGllbnQiLCJlcnIiLCJfZW1pdCIsInRscyIsImNvbm5lY3QiLCJzb2NrZXQiLCJzZXJ2ZXJuYW1lIiwiX2F0dGFjaExpc3RlbmVycyIsIm1pblZlcnNpb24iLCJtaW5UTFNWZXJzaW9uIiwiREVGQVVMVF9NSU5fVkVSU0lPTiIsIm1heFZlcnNpb24iLCJtYXhUTFNWZXJzaW9uIiwiREVGQVVMVF9NQVhfVkVSU0lPTiIsIm5ldCIsIm9uIiwibm9kZUJ1ZiIsIm5vZGVCdWZmZXJ0b0FycmF5QnVmZmVyIiwiZXJyb3IiLCJjb2RlIiwiY2xvc2UiLCJfcmVtb3ZlTGlzdGVuZXJzIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwidHlwZSIsImRhdGEiLCJ0YXJnZXQiLCJvbm9wZW4iLCJvbmVycm9yIiwib25kYXRhIiwib25kcmFpbiIsIm9uY2xvc2UiLCJlbmQiLCJzZW5kIiwid3JpdGUiLCJhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlciIsImJpbmQiLCJ1cGdyYWRlVG9TZWN1cmUiLCJidWYiLCJVaW50OEFycmF5IiwiZnJvbSIsImJ1ZmZlciIsImFiIiwiQnVmZmVyIl0sInNvdXJjZXMiOlsiLi4vc3JjL25vZGUtc29ja2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByb3BPciB9IGZyb20gJ3JhbWRhJ1xuaW1wb3J0IG5ldCBmcm9tICduZXQnXG5pbXBvcnQgdGxzIGZyb20gJ3RscydcbmltcG9ydCBodHRwUHJveHlDbGllbnQgZnJvbSAnLi9odHRwLXByb3h5LWNsaWVudC5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVENQU29ja2V0IHtcbiAgc3RhdGljIG9wZW4gKGhvc3QsIHBvcnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgVENQU29ja2V0KHsgaG9zdCwgcG9ydCwgb3B0aW9ucyB9KVxuICB9XG5cbiAgY29uc3RydWN0b3IgKHsgaG9zdCwgcG9ydCwgb3B0aW9ucyB9KSB7XG4gICAgdGhpcy5ob3N0ID0gaG9zdFxuICAgIHRoaXMucG9ydCA9IHBvcnRcbiAgICB0aGlzLnNzbCA9IHByb3BPcihmYWxzZSwgJ3VzZVNlY3VyZVRyYW5zcG9ydCcpKG9wdGlvbnMpXG4gICAgdGhpcy5idWZmZXJlZEFtb3VudCA9IDBcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY29ubmVjdGluZydcbiAgICB0aGlzLmJpbmFyeVR5cGUgPSBwcm9wT3IoJ2FycmF5YnVmZmVyJywgJ2JpbmFyeVR5cGUnKShvcHRpb25zKVxuXG4gICAgaWYgKHRoaXMuYmluYXJ5VHlwZSAhPT0gJ2FycmF5YnVmZmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGFycmF5YnVmZmVycyBhcmUgc3VwcG9ydGVkIScpXG4gICAgfVxuICAgIGlmIChvcHRpb25zLnByb3h5KSB7XG4gICAgICB0aGlzLl9zb2NrZXQgPSBodHRwUHJveHlDbGllbnQob3B0aW9ucy5wcm94eSwgdGhpcy5wb3J0LCB0aGlzLmhvc3QsIGVyciA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiB0aGlzLl9lbWl0KCdlcnJvcicsIGVycilcbiAgICAgICAgLy8gVXBncmFkZSB0byBTU0wgY29ubmVjdGlvbiBpZiB1c2luZyBzZWN1cmUgY29ubmVjdGlvblxuICAgICAgICBpZiAodGhpcy5zc2wpIHtcbiAgICAgICAgICB0aGlzLl9zb2NrZXQgPSB0bHMuY29ubmVjdCh7XG4gICAgICAgICAgICBzb2NrZXQ6IHRoaXMuX3NvY2tldCxcbiAgICAgICAgICAgIGhvc3Q6IHRoaXMuaG9zdCxcbiAgICAgICAgICAgIHNlcnZlcm5hbWU6IHRoaXMuaG9zdCAvLyBTTklcbiAgICAgICAgICB9LCAoKSA9PiB7IHRoaXMuc3NsID0gdHJ1ZSB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2F0dGFjaExpc3RlbmVycygpXG4gICAgICAgIHRoaXMuX2VtaXQoJ29wZW4nKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc29ja2V0ID0gdGhpcy5zc2wgPyAoXG4gICAgICAgIHRscy5jb25uZWN0KHtcbiAgICAgICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICAgICAgaG9zdDogdGhpcy5ob3N0LFxuICAgICAgICAgIG1pblZlcnNpb246IG9wdGlvbnMubWluVExTVmVyc2lvbiB8fCB0bHMuREVGQVVMVF9NSU5fVkVSU0lPTixcbiAgICAgICAgICBtYXhWZXJzaW9uOiBvcHRpb25zLm1heFRMU1ZlcnNpb24gfHwgdGxzLkRFRkFVTFRfTUFYX1ZFUlNJT04sXG4gICAgICAgICAgc2VydmVybmFtZTogdGhpcy5ob3N0IC8vIFNOSVxuICAgICAgICB9LCAoKSA9PiB0aGlzLl9lbWl0KCdvcGVuJykpKSA6IChcbiAgICAgICAgbmV0LmNvbm5lY3QodGhpcy5wb3J0LCB0aGlzLmhvc3QsICgpID0+IHRoaXMuX2VtaXQoJ29wZW4nKSlcbiAgICAgIClcbiAgICAgIC8vIGFkZCBhbGwgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBuZXcgc29ja2V0XG4gICAgICB0aGlzLl9hdHRhY2hMaXN0ZW5lcnMoKVxuICAgIH1cbiAgfVxuXG4gIF9hdHRhY2hMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuX3NvY2tldC5vbignZGF0YScsIG5vZGVCdWYgPT4gdGhpcy5fZW1pdCgnZGF0YScsIG5vZGVCdWZmZXJ0b0FycmF5QnVmZmVyKG5vZGVCdWYpKSlcbiAgICB0aGlzLl9zb2NrZXQub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgLy8gSWdub3JlIEVDT05OUkVTRVQgZXJyb3JzLiBGb3IgdGhlIGFwcCB0aGlzIGlzIHRoZSBzYW1lIGFzIG5vcm1hbCBjbG9zZVxuICAgICAgaWYgKGVycm9yLmNvZGUgIT09ICdFQ09OTlJFU0VUJykge1xuICAgICAgICB0aGlzLl9lbWl0KCdlcnJvcicsIGVycm9yKVxuICAgICAgfVxuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfSlcblxuICAgIHRoaXMuX3NvY2tldC5vbignZW5kJywgKCkgPT4gdGhpcy5fZW1pdCgnY2xvc2UnKSlcbiAgfVxuXG4gIF9yZW1vdmVMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuX3NvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2RhdGEnKVxuICAgIHRoaXMuX3NvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2VuZCcpXG4gICAgdGhpcy5fc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygnZXJyb3InKVxuICB9XG5cbiAgX2VtaXQgKHR5cGUsIGRhdGEpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW4nXG4gICAgICAgIHRoaXMub25vcGVuICYmIHRoaXMub25vcGVuKHsgdGFyZ2V0LCB0eXBlLCBkYXRhIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIHRoaXMub25lcnJvciAmJiB0aGlzLm9uZXJyb3IoeyB0YXJnZXQsIHR5cGUsIGRhdGEgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICB0aGlzLm9uZGF0YSAmJiB0aGlzLm9uZGF0YSh7IHRhcmdldCwgdHlwZSwgZGF0YSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZHJhaW4nOlxuICAgICAgICB0aGlzLm9uZHJhaW4gJiYgdGhpcy5vbmRyYWluKHsgdGFyZ2V0LCB0eXBlLCBkYXRhIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjbG9zZSc6XG4gICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnXG4gICAgICAgIHRoaXMub25jbG9zZSAmJiB0aGlzLm9uY2xvc2UoeyB0YXJnZXQsIHR5cGUsIGRhdGEgfSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvL1xuICAvLyBBUElcbiAgLy9cblxuICBjbG9zZSAoKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnXG4gICAgdGhpcy5fc29ja2V0LmVuZCgpXG4gIH1cblxuICBzZW5kIChkYXRhKSB7XG4gICAgLy8gY29udmVydCBkYXRhIHRvIHN0cmluZyBvciBub2RlIGJ1ZmZlclxuICAgIHRoaXMuX3NvY2tldC53cml0ZShhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlcihkYXRhKSwgdGhpcy5fZW1pdC5iaW5kKHRoaXMsICdkcmFpbicpKVxuICB9XG5cbiAgdXBncmFkZVRvU2VjdXJlICgpIHtcbiAgICBpZiAodGhpcy5zc2wpIHJldHVyblxuXG4gICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKClcbiAgICB0aGlzLl9zb2NrZXQgPSB0bHMuY29ubmVjdCh7XG4gICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICBzZXJ2ZXJuYW1lOiB0aGlzLmhvc3QsIC8vIFNOSVxuICAgICAgc29ja2V0OiB0aGlzLl9zb2NrZXRcbiAgICB9LCAoKSA9PiB7IHRoaXMuc3NsID0gdHJ1ZSB9KVxuICAgIHRoaXMuX2F0dGFjaExpc3RlbmVycygpXG4gIH1cbn1cblxuY29uc3Qgbm9kZUJ1ZmZlcnRvQXJyYXlCdWZmZXIgPSBidWYgPT4gVWludDhBcnJheS5mcm9tKGJ1ZikuYnVmZmVyXG5jb25zdCBhcnJheUJ1ZmZlclRvTm9kZUJ1ZmZlciA9IChhYikgPT4gQnVmZmVyLmZyb20obmV3IFVpbnQ4QXJyYXkoYWIpKVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFvRDtBQUVyQyxNQUFNQSxTQUFTLENBQUM7RUFDN0IsT0FBT0MsSUFBSSxDQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQ3JDLE9BQU8sSUFBSUosU0FBUyxDQUFDO01B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