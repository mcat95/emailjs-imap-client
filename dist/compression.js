"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Compressor;
var _zstream = _interopRequireDefault(require("pako/lib/zlib/zstream"));
var _deflate = require("pako/lib/zlib/deflate");
var _inflate = require("pako/lib/zlib/inflate");
var _messages = _interopRequireDefault(require("pako/lib/zlib/messages.js"));
var _constants = require("pako/lib/zlib/constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const CHUNK_SIZE = 16384;
const WINDOW_BITS = 15;

/**
 * Handles de-/compression via #inflate() and #deflate(), calls you back via #deflatedReady() and #inflatedReady().
 * The chunk we get from deflater is actually a view of a 16kB arraybuffer, so we need to copy the relevant parts
 * memory to a new arraybuffer.
 */
function Compressor(inflatedReady, deflatedReady) {
  this.inflatedReady = inflatedReady;
  this.deflatedReady = deflatedReady;
  this._inflate = inflater(chunk => this.inflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length)));
  this._deflate = deflater(chunk => this.deflatedReady(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.length)));
}
Compressor.prototype.inflate = function (buffer) {
  this._inflate(new Uint8Array(buffer));
};
Compressor.prototype.deflate = function (buffer) {
  this._deflate(new Uint8Array(buffer));
};
function deflater(emit) {
  const stream = new _zstream.default();
  const status = (0, _deflate.deflateInit2)(stream, _constants.Z_DEFAULT_COMPRESSION, _constants.Z_DEFLATED, WINDOW_BITS, 8, _constants.Z_DEFAULT_STRATEGY);
  if (status !== _constants.Z_OK) {
    throw new Error('Problem initializing deflate stream: ' + _messages.default[status]);
  }
  return function (data) {
    if (data === undefined) return emit();

    // Attach the input data
    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    let status;
    let output;
    let start;
    let ret = true;
    do {
      // When the stream gets full, we need to create new space.
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      }

      // Perform the deflate
      status = (0, _deflate.deflate)(stream, _constants.Z_SYNC_FLUSH);
      if (status !== _constants.Z_STREAM_END && status !== _constants.Z_OK) {
        throw new Error('Deflate problem: ' + _messages.default[status]);
      }

      // If the output buffer got full, flush the data.
      if (stream.avail_out === 0 && stream.next_out > start) {
        output = stream.output.subarray(start, start = stream.next_out);
        ret = emit(output);
      }
    } while ((stream.avail_in > 0 || stream.avail_out === 0) && status !== _constants.Z_STREAM_END);

    // Emit whatever is left in output.
    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }
    return ret;
  };
}
function inflater(emit) {
  const stream = new _zstream.default();
  const status = (0, _inflate.inflateInit2)(stream, WINDOW_BITS);
  if (status !== _constants.Z_OK) {
    throw new Error('Problem initializing inflate stream: ' + _messages.default[status]);
  }
  return function (data) {
    if (data === undefined) return emit();
    let start;
    stream.input = data;
    stream.next_in = 0;
    stream.avail_in = stream.input.length;
    let status, output;
    let ret = true;
    do {
      if (stream.avail_out === 0) {
        stream.output = new Uint8Array(CHUNK_SIZE);
        start = stream.next_out = 0;
        stream.avail_out = CHUNK_SIZE;
      }
      status = (0, _inflate.inflate)(stream, _constants.Z_NO_FLUSH);
      if (status !== _constants.Z_STREAM_END && status !== _constants.Z_OK) {
        throw new Error('inflate problem: ' + _messages.default[status]);
      }
      if (stream.next_out) {
        if (stream.avail_out === 0 || status === _constants.Z_STREAM_END) {
          output = stream.output.subarray(start, start = stream.next_out);
          ret = emit(output);
        }
      }
    } while (stream.avail_in > 0 && status !== _constants.Z_STREAM_END);
    if (stream.next_out > start) {
      output = stream.output.subarray(start, start = stream.next_out);
      ret = emit(output);
    }
    return ret;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfenN0cmVhbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2RlZmxhdGUiLCJfaW5mbGF0ZSIsIl9tZXNzYWdlcyIsIl9jb25zdGFudHMiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJDSFVOS19TSVpFIiwiV0lORE9XX0JJVFMiLCJDb21wcmVzc29yIiwiaW5mbGF0ZWRSZWFkeSIsImRlZmxhdGVkUmVhZHkiLCJpbmZsYXRlciIsImNodW5rIiwiYnVmZmVyIiwic2xpY2UiLCJieXRlT2Zmc2V0IiwibGVuZ3RoIiwiZGVmbGF0ZXIiLCJwcm90b3R5cGUiLCJpbmZsYXRlIiwiVWludDhBcnJheSIsImRlZmxhdGUiLCJlbWl0Iiwic3RyZWFtIiwiWlN0cmVhbSIsInN0YXR1cyIsImRlZmxhdGVJbml0MiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfREVGTEFURUQiLCJaX0RFRkFVTFRfU1RSQVRFR1kiLCJaX09LIiwiRXJyb3IiLCJtZXNzYWdlcyIsImRhdGEiLCJ1bmRlZmluZWQiLCJpbnB1dCIsIm5leHRfaW4iLCJhdmFpbF9pbiIsIm91dHB1dCIsInN0YXJ0IiwicmV0IiwiYXZhaWxfb3V0IiwibmV4dF9vdXQiLCJaX1NZTkNfRkxVU0giLCJaX1NUUkVBTV9FTkQiLCJzdWJhcnJheSIsImluZmxhdGVJbml0MiIsIlpfTk9fRkxVU0giXSwic291cmNlcyI6WyIuLi9zcmMvY29tcHJlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFpTdHJlYW0gZnJvbSAncGFrby9saWIvemxpYi96c3RyZWFtJ1xuaW1wb3J0IHsgZGVmbGF0ZUluaXQyLCBkZWZsYXRlIH0gZnJvbSAncGFrby9saWIvemxpYi9kZWZsYXRlJ1xuaW1wb3J0IHsgaW5mbGF0ZSwgaW5mbGF0ZUluaXQyIH0gZnJvbSAncGFrby9saWIvemxpYi9pbmZsYXRlJ1xuaW1wb3J0IG1lc3NhZ2VzIGZyb20gJ3Bha28vbGliL3psaWIvbWVzc2FnZXMuanMnXG5pbXBvcnQge1xuICBaX05PX0ZMVVNILCBaX1NZTkNfRkxVU0gsIFpfT0ssXG4gIFpfU1RSRUFNX0VORCwgWl9ERUZBVUxUX0NPTVBSRVNTSU9OLFxuICBaX0RFRkFVTFRfU1RSQVRFR1ksIFpfREVGTEFURURcbn0gZnJvbSAncGFrby9saWIvemxpYi9jb25zdGFudHMnXG5cbmNvbnN0IENIVU5LX1NJWkUgPSAxNjM4NFxuY29uc3QgV0lORE9XX0JJVFMgPSAxNVxuXG4vKipcbiAqIEhhbmRsZXMgZGUtL2NvbXByZXNzaW9uIHZpYSAjaW5mbGF0ZSgpIGFuZCAjZGVmbGF0ZSgpLCBjYWxscyB5b3UgYmFjayB2aWEgI2RlZmxhdGVkUmVhZHkoKSBhbmQgI2luZmxhdGVkUmVhZHkoKS5cbiAqIFRoZSBjaHVuayB3ZSBnZXQgZnJvbSBkZWZsYXRlciBpcyBhY3R1YWxseSBhIHZpZXcgb2YgYSAxNmtCIGFycmF5YnVmZmVyLCBzbyB3ZSBuZWVkIHRvIGNvcHkgdGhlIHJlbGV2YW50IHBhcnRzXG4gKiBtZW1vcnkgdG8gYSBuZXcgYXJyYXlidWZmZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbXByZXNzb3IgKGluZmxhdGVkUmVhZHksIGRlZmxhdGVkUmVhZHkpIHtcbiAgdGhpcy5pbmZsYXRlZFJlYWR5ID0gaW5mbGF0ZWRSZWFkeVxuICB0aGlzLmRlZmxhdGVkUmVhZHkgPSBkZWZsYXRlZFJlYWR5XG4gIHRoaXMuX2luZmxhdGUgPSBpbmZsYXRlcihjaHVuayA9PiB0aGlzLmluZmxhdGVkUmVhZHkoY2h1bmsuYnVmZmVyLnNsaWNlKGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVPZmZzZXQgKyBjaHVuay5sZW5ndGgpKSlcbiAgdGhpcy5fZGVmbGF0ZSA9IGRlZmxhdGVyKGNodW5rID0+IHRoaXMuZGVmbGF0ZWRSZWFkeShjaHVuay5idWZmZXIuc2xpY2UoY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZU9mZnNldCArIGNodW5rLmxlbmd0aCkpKVxufVxuXG5Db21wcmVzc29yLnByb3RvdHlwZS5pbmZsYXRlID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICB0aGlzLl9pbmZsYXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpXG59XG5cbkNvbXByZXNzb3IucHJvdG90eXBlLmRlZmxhdGUgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHRoaXMuX2RlZmxhdGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSlcbn1cblxuZnVuY3Rpb24gZGVmbGF0ZXIgKGVtaXQpIHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFpTdHJlYW0oKVxuICBjb25zdCBzdGF0dXMgPSBkZWZsYXRlSW5pdDIoc3RyZWFtLCBaX0RFRkFVTFRfQ09NUFJFU1NJT04sIFpfREVGTEFURUQsIFdJTkRPV19CSVRTLCA4LCBaX0RFRkFVTFRfU1RSQVRFR1kpXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2JsZW0gaW5pdGlhbGl6aW5nIGRlZmxhdGUgc3RyZWFtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHJldHVybiBlbWl0KClcblxuICAgIC8vIEF0dGFjaCB0aGUgaW5wdXQgZGF0YVxuICAgIHN0cmVhbS5pbnB1dCA9IGRhdGFcbiAgICBzdHJlYW0ubmV4dF9pbiA9IDBcbiAgICBzdHJlYW0uYXZhaWxfaW4gPSBzdHJlYW0uaW5wdXQubGVuZ3RoXG5cbiAgICBsZXQgc3RhdHVzXG4gICAgbGV0IG91dHB1dFxuICAgIGxldCBzdGFydFxuICAgIGxldCByZXQgPSB0cnVlXG5cbiAgICBkbyB7XG4gICAgICAvLyBXaGVuIHRoZSBzdHJlYW0gZ2V0cyBmdWxsLCB3ZSBuZWVkIHRvIGNyZWF0ZSBuZXcgc3BhY2UuXG4gICAgICBpZiAoc3RyZWFtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzdHJlYW0ub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkoQ0hVTktfU0laRSlcbiAgICAgICAgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQgPSAwXG4gICAgICAgIHN0cmVhbS5hdmFpbF9vdXQgPSBDSFVOS19TSVpFXG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGRlZmxhdGVcbiAgICAgIHN0YXR1cyA9IGRlZmxhdGUoc3RyZWFtLCBaX1NZTkNfRkxVU0gpXG4gICAgICBpZiAoc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQgJiYgc3RhdHVzICE9PSBaX09LKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGVmbGF0ZSBwcm9ibGVtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIG91dHB1dCBidWZmZXIgZ290IGZ1bGwsIGZsdXNoIHRoZSBkYXRhLlxuICAgICAgaWYgKHN0cmVhbS5hdmFpbF9vdXQgPT09IDAgJiYgc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgICAgb3V0cHV0ID0gc3RyZWFtLm91dHB1dC5zdWJhcnJheShzdGFydCwgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQpXG4gICAgICAgIHJldCA9IGVtaXQob3V0cHV0KVxuICAgICAgfVxuICAgIH0gd2hpbGUgKChzdHJlYW0uYXZhaWxfaW4gPiAwIHx8IHN0cmVhbS5hdmFpbF9vdXQgPT09IDApICYmIHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EKVxuXG4gICAgLy8gRW1pdCB3aGF0ZXZlciBpcyBsZWZ0IGluIG91dHB1dC5cbiAgICBpZiAoc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgIG91dHB1dCA9IHN0cmVhbS5vdXRwdXQuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0KVxuICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmZsYXRlciAoZW1pdCkge1xuICBjb25zdCBzdHJlYW0gPSBuZXcgWlN0cmVhbSgpXG5cbiAgY29uc3Qgc3RhdHVzID0gaW5mbGF0ZUluaXQyKHN0cmVhbSwgV0lORE9XX0JJVFMpXG4gIGlmIChzdGF0dXMgIT09IFpfT0spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2JsZW0gaW5pdGlhbGl6aW5nIGluZmxhdGUgc3RyZWFtOiAnICsgbWVzc2FnZXNbc3RhdHVzXSlcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHJldHVybiBlbWl0KClcblxuICAgIGxldCBzdGFydFxuICAgIHN0cmVhbS5pbnB1dCA9IGRhdGFcbiAgICBzdHJlYW0ubmV4dF9pbiA9IDBcbiAgICBzdHJlYW0uYXZhaWxfaW4gPSBzdHJlYW0uaW5wdXQubGVuZ3RoXG5cbiAgICBsZXQgc3RhdHVzLCBvdXRwdXRcbiAgICBsZXQgcmV0ID0gdHJ1ZVxuXG4gICAgZG8ge1xuICAgICAgaWYgKHN0cmVhbS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgc3RyZWFtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KENIVU5LX1NJWkUpXG4gICAgICAgIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0ID0gMFxuICAgICAgICBzdHJlYW0uYXZhaWxfb3V0ID0gQ0hVTktfU0laRVxuICAgICAgfVxuXG4gICAgICBzdGF0dXMgPSBpbmZsYXRlKHN0cmVhbSwgWl9OT19GTFVTSClcbiAgICAgIGlmIChzdGF0dXMgIT09IFpfU1RSRUFNX0VORCAmJiBzdGF0dXMgIT09IFpfT0spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbmZsYXRlIHByb2JsZW06ICcgKyBtZXNzYWdlc1tzdGF0dXNdKVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyZWFtLm5leHRfb3V0KSB7XG4gICAgICAgIGlmIChzdHJlYW0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gWl9TVFJFQU1fRU5EKSB7XG4gICAgICAgICAgb3V0cHV0ID0gc3RyZWFtLm91dHB1dC5zdWJhcnJheShzdGFydCwgc3RhcnQgPSBzdHJlYW0ubmV4dF9vdXQpXG4gICAgICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IHdoaWxlICgoc3RyZWFtLmF2YWlsX2luID4gMCkgJiYgc3RhdHVzICE9PSBaX1NUUkVBTV9FTkQpXG5cbiAgICBpZiAoc3RyZWFtLm5leHRfb3V0ID4gc3RhcnQpIHtcbiAgICAgIG91dHB1dCA9IHN0cmVhbS5vdXRwdXQuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ID0gc3RyZWFtLm5leHRfb3V0KVxuICAgICAgcmV0ID0gZW1pdChvdXRwdXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFVBQUEsR0FBQUosT0FBQTtBQUlnQyxTQUFBRCx1QkFBQU0sQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUVoQyxNQUFNRyxVQUFVLEdBQUcsS0FBSztBQUN4QixNQUFNQyxXQUFXLEdBQUcsRUFBRTs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNDLFVBQVVBLENBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFO0VBQ2hFLElBQUksQ0FBQ0QsYUFBYSxHQUFHQSxhQUFhO0VBQ2xDLElBQUksQ0FBQ0MsYUFBYSxHQUFHQSxhQUFhO0VBQ2xDLElBQUksQ0FBQ1YsUUFBUSxHQUFHVyxRQUFRLENBQUNDLEtBQUssSUFBSSxJQUFJLENBQUNILGFBQWEsQ0FBQ0csS0FBSyxDQUFDQyxNQUFNLENBQUNDLEtBQUssQ0FBQ0YsS0FBSyxDQUFDRyxVQUFVLEVBQUVILEtBQUssQ0FBQ0csVUFB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